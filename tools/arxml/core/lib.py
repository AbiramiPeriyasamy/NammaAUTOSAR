#
# Created on Mon Aug 15 2022 1:49:18 PM
#
# The MIT License (MIT)
# Copyright (c) 2022 Aananth C N
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial
# portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
import os
import sys
import xml.etree.ElementTree as ET

from datetime import datetime


Ecuc_ArPkg = None

###############################################################################
# Common ARXML specific routines are placed here.
def setget_ecuc_arpkg_name(filepath):
   global Ecuc_ArPkg
   Ecuc_ArPkg = "Ecuc_"+filepath.split("/")[-1].split(".")[0]
   return Ecuc_ArPkg
   
def get_ecuc_arpkg_name():
   global Ecuc_ArPkg
   return Ecuc_ArPkg


#####################################
# General Functions
#####################################
def set_arxml_namespace(root):
   root.set("xmlns", "http://autosar.org/schema/r4.0")
   root.set("xmlns:xml", "http://www.w3.org/XML/1998/namespace")
   root.set("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
   root.set("xsi:schemaLocation", "http://autosar.org/schema/r4.0 AUTOSAR_4-0-3_STRICT.xsd")


def finalize_arxml_doc(file):
   with open(file, "r") as f:
      contents = f.readlines()
   comment = "<!-- Generated by AUTOSAR Builder tool of NammaAUTOSAR project on " + str(datetime.now()) + " -->\n"
   contents.insert(1, comment)
   with open(file, "w") as f:
      contents = "".join(contents)
      f.write(contents)



def tag_uri_and_name(elem):
    if elem.tag[0] == "{":
        uri, ignore, tag = elem.tag[1:].partition("}")
    else:
        uri = None
        tag = elem.tag
    return uri, tag



#####################################
# Get Functions
#####################################
def get_tag(elem):
   uri, tag = tag_uri_and_name(elem)
   return tag


def get_param(elem):
   tag = val = None
   for item in list(elem):
      if get_tag(item) == "DEFINITION-REF":
         tag = str(item.text).split("/")[-1]
      if get_tag(item) == "VALUE":
         val = item.text
   return tag, val



def get_param_list(ctnr):
   plist = []
   for elem in list(ctnr):
      if get_tag(elem) == "PARAMETER-VALUES":
         for param in list(elem):
            if get_tag(param)[-11:] == "PARAM-VALUE":
               tag, val = get_param(param)
               item = { "tag":tag, "val":val }
               plist.append(item)
   return plist



def get_dref_from_container(ctnr):
   dref = None
   for elem in list(ctnr):
      if get_tag(elem) == "DEFINITION-REF":
         dref = elem.text
         break
   return dref



def get_dref_list(ctnr):
   plist = []
   tag = val = None
   for elem in list(ctnr):
      if get_tag(elem) == "ECUC-REFERENCE-VALUE":
         for ref in list(elem):
            if get_tag(ref) == "DEFINITION-REF":
               tag = str(ref.text).split("/")[-1]
            if get_tag(ref) == "VALUE-REF":
               val = str(ref.text).split("/")[-1]
         item = { "tag":tag, "val":val }
         plist.append(item)
   return plist


def get_refval_list(ctnr):
   plist = []
   for elem in list(ctnr):
      if get_tag(elem) == "REFERENCE-VALUES":
         plist = get_dref_list(elem)
         break
   return plist


#####################################
# Search Functions
#####################################
def find_ar_package(shortname, root):
   ar_pkg = None

   if get_tag(root) == "AUTOSAR":
      for item in list(root):
         if get_tag(item) == "AR-PACKAGES":
            for pkg in list(item):
               if get_tag(pkg) == "AR-PACKAGE":
                  for elem in list(pkg):
                     if get_tag(elem) == "SHORT-NAME":
                        if shortname in elem.text:
                           ar_pkg = pkg
                           break
   return ar_pkg


